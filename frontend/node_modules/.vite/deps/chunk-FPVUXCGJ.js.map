{
  "version": 3,
  "sources": ["../../@material-ui/core/esm/utils/setRef.js", "../../@material-ui/core/esm/utils/useForkRef.js"],
  "sourcesContent": ["// TODO v5: consider to make it private\r\nexport default function setRef(ref, value) {\r\n  if (typeof ref === 'function') {\r\n    ref(value);\r\n  } else if (ref) {\r\n    ref.current = value;\r\n  }\r\n}", "import * as React from 'react';\r\nimport setRef from './setRef';\r\nexport default function useForkRef(refA, refB) {\r\n  /**\r\n   * This will create a new function if the ref props change and are defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior\r\n   */\r\n  return React.useMemo(function () {\r\n    if (refA == null && refB == null) {\r\n      return null;\r\n    }\r\n\r\n    return function (refValue) {\r\n      setRef(refA, refValue);\r\n      setRef(refB, refValue);\r\n    };\r\n  }, [refA, refB]);\r\n}"],
  "mappings": ";;;;;;;;;AACe,SAAR,OAAwB,KAAK,OAAO;AACzC,MAAI,OAAO,QAAQ,YAAY;AAC7B,QAAI,KAAK;AAAA,EACX,WAAW,KAAK;AACd,QAAI,UAAU;AAAA,EAChB;AACF;AAPA;AAAA;AAAA;AAAA;;;ACEe,SAAR,WAA4B,MAAM,MAAM;AAM7C,SAAa,cAAQ,WAAY;AAC/B,QAAI,QAAQ,QAAQ,QAAQ,MAAM;AAChC,aAAO;AAAA,IACT;AAEA,WAAO,SAAU,UAAU;AACzB,aAAO,MAAM,QAAQ;AACrB,aAAO,MAAM,QAAQ;AAAA,IACvB;AAAA,EACF,GAAG,CAAC,MAAM,IAAI,CAAC;AACjB;AAlBA;AAAA;AAAA;AAAA,YAAuB;AACvB;AAAA;AAAA;",
  "names": []
}
